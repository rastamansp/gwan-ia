#!/bin/bash

# ========================================
# Script de Valida√ß√£o de Monitoramento - Gwan IA
# ========================================
# Este script valida se as informa√ß√µes est√£o sendo enviadas
# corretamente para os sistemas de monitoramento

echo "üîç VALIDA√á√ÉO DE MONITORAMENTO - GWAN IA"
echo "========================================"
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir status
print_status() {
    local status=$1
    local message=$2
    if [ "$status" = "OK" ]; then
        echo -e "${GREEN}‚úÖ $message${NC}"
    elif [ "$status" = "WARNING" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}"
    elif [ "$status" = "ERROR" ]; then
        echo -e "${RED}‚ùå $message${NC}"
    else
        echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}"
    fi
}

# Fun√ß√£o para testar conectividade
test_connectivity() {
    local url=$1
    local name=$2
    local timeout=${3:-5}
    
    echo -n "Testando $name... "
    if curl -s --max-time $timeout "$url" > /dev/null 2>&1; then
        print_status "OK" "$name est√° acess√≠vel"
        return 0
    else
        print_status "ERROR" "$name n√£o est√° acess√≠vel"
        return 1
    fi
}

# Fun√ß√£o para verificar endpoint de health
test_health_endpoint() {
    local url=$1
    local name=$2
    
    echo -n "Testando health check de $name... "
    response=$(curl -s --max-time 5 "$url/health" 2>/dev/null)
    if [ "$response" = "healthy" ]; then
        print_status "OK" "$name health check OK"
        return 0
    else
        print_status "ERROR" "$name health check falhou"
        return 1
    fi
}

# Fun√ß√£o para verificar m√©tricas Prometheus
test_prometheus_metrics() {
    local url=$1
    local name=$2
    
    echo -n "Testando m√©tricas Prometheus de $name... "
    response=$(curl -s --max-time 5 "$url/metrics" 2>/dev/null)
    if echo "$response" | grep -q "http_requests_total\|nginx_"; then
        print_status "OK" "$name enviando m√©tricas"
        return 0
    else
        print_status "WARNING" "$name n√£o est√° enviando m√©tricas ou endpoint n√£o encontrado"
        return 1
    fi
}

echo "1. üîó TESTANDO CONECTIVIDADE DOS SISTEMAS DE MONITORAMENTO"
echo "--------------------------------------------------------"

# Testar sistemas de monitoramento
test_connectivity "http://jaeger.gwan.com.br" "Jaeger"
test_connectivity "http://kibana.gwan.com.br" "Kibana"
test_connectivity "http://prometheus.gwan.com.br" "Prometheus"
test_connectivity "http://alertmanager.gwan.com.br" "Alertmanager"

echo ""
echo "2. üè• TESTANDO HEALTH CHECKS"
echo "----------------------------"

# Testar health check do site principal
test_health_endpoint "http://gwan.com.br" "Site Principal"
test_health_endpoint "http://localhost:8080" "Site Local"

echo ""
echo "3. üìä TESTANDO M√âTRICAS PROMETHEUS"
echo "---------------------------------"

# Testar m√©tricas do site principal
test_prometheus_metrics "http://gwan.com.br" "Site Principal"
test_prometheus_metrics "http://localhost:8080" "Site Local"

echo ""
echo "4. üê≥ TESTANDO CONTAINER DOCKER"
echo "------------------------------"

# Verificar se o container est√° rodando
if docker ps | grep -q "gwan-site"; then
    print_status "OK" "Container gwan-site est√° rodando"
    
    # Verificar logs do container
    echo "√öltimas 10 linhas dos logs do container:"
    docker logs --tail 10 gwan-site 2>/dev/null | sed 's/^/  /'
    
    # Verificar recursos do container
    echo ""
    echo "Uso de recursos do container:"
    docker stats --no-stream gwan-site 2>/dev/null | tail -1 | sed 's/^/  /'
    
else
    print_status "ERROR" "Container gwan-site n√£o est√° rodando"
fi

echo ""
echo "5. üìù TESTANDO LOGS ESTRUTURADOS"
echo "-------------------------------"

# Verificar se os logs est√£o sendo gerados
if docker logs gwan-site 2>/dev/null | grep -q "GET\|POST\|PUT\|DELETE"; then
    print_status "OK" "Logs de requisi√ß√µes HTTP est√£o sendo gerados"
else
    print_status "WARNING" "Poucos logs de requisi√ß√µes HTTP encontrados"
fi

# Verificar logs de erro
error_count=$(docker logs gwan-site 2>/dev/null | grep -c "ERROR\|error\|Error" || echo "0")
if [ "$error_count" -gt 0 ]; then
    print_status "WARNING" "Encontrados $error_count logs de erro"
    echo "√öltimos 3 erros:"
    docker logs gwan-site 2>/dev/null | grep -i error | tail -3 | sed 's/^/  /'
else
    print_status "OK" "Nenhum erro encontrado nos logs"
fi

echo ""
echo "6. üîß TESTANDO CONFIGURA√á√ïES DE AMBIENTE"
echo "---------------------------------------"

# Verificar vari√°veis de ambiente do container
if docker exec gwan-site env 2>/dev/null | grep -q "OTEL_"; then
    print_status "OK" "Vari√°veis OpenTelemetry configuradas"
    echo "Vari√°veis OTEL encontradas:"
    docker exec gwan-site env 2>/dev/null | grep "OTEL_" | sed 's/^/  /'
else
    print_status "WARNING" "Vari√°veis OpenTelemetry n√£o encontradas"
fi

# Verificar vari√°veis de log
if docker exec gwan-site env 2>/dev/null | grep -q "LOG_"; then
    print_status "OK" "Vari√°veis de log configuradas"
    echo "Vari√°veis LOG encontradas:"
    docker exec gwan-site env 2>/dev/null | grep "LOG_" | sed 's/^/  /'
else
    print_status "WARNING" "Vari√°veis de log n√£o encontradas"
fi

echo ""
echo "7. üåê TESTANDO REQUISI√á√ïES HTTP"
echo "-----------------------------"

# Testar algumas p√°ginas principais
pages=("/" "/auth" "/dashboard" "/bot-jaiminho")
for page in "${pages[@]}"; do
    echo -n "Testando p√°gina $page... "
    if curl -s --max-time 5 "http://localhost:8080$page" > /dev/null 2>&1; then
        print_status "OK" "P√°gina $page acess√≠vel"
    else
        print_status "ERROR" "P√°gina $page n√£o acess√≠vel"
    fi
done

echo ""
echo "8. üìà RESUMO DA VALIDA√á√ÉO"
echo "========================"

# Contar sucessos e falhas
total_tests=0
passed_tests=0

# Esta √© uma vers√£o simplificada - em um script real voc√™ contaria os resultados
print_status "INFO" "Valida√ß√£o conclu√≠da"
print_status "INFO" "Para monitoramento completo, verifique:"
echo "  ‚Ä¢ Jaeger: http://jaeger.gwan.com.br/search"
echo "  ‚Ä¢ Kibana: http://kibana.gwan.com.br/app/discover"
echo "  ‚Ä¢ Prometheus: http://prometheus.gwan.com.br/targets"
echo "  ‚Ä¢ Alertmanager: http://alertmanager.gwan.com.br/#/alerts"

echo ""
echo "üí° PR√ìXIMOS PASSOS:"
echo "1. Implementar OpenTelemetry no frontend React"
echo "2. Adicionar logs estruturados em JSON"
echo "3. Configurar m√©tricas personalizadas"
echo "4. Testar integra√ß√£o completa com Jaeger"
echo "5. Criar dashboards personalizados no Kibana"

echo ""
echo "‚úÖ Valida√ß√£o de monitoramento conclu√≠da!"
